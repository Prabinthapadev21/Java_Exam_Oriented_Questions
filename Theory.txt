What is Continue Statement in java?
Continue statement is a control flow statement which is used to skip the current iteration
of a loop and move to next one.It is often used with the conditional satements inside
for,while,do-while loop.
Example:
for(int i =0;i<10;i++)
{
if(i==5)
{
continue;
}
System.out.Println(i+"");
}
output = 0,1,2,3,4,6,7,8,9

What is a partmeterized constructor? Explain With Example.
A parameterized constructor is a constructor that accepts arguments to initilize an object with specific values when it is created.
Example:
class Hello
{
String s;
}
public Hello(String s)
{
this.s = s;
}
public void display()
{
System.out.println("Name= "+s);
}
public static void main(String[] args)
{
Hello h = new Hello("Prabin");
h.display();
}
}

Explain Method Overloading in java with a proper example.
Method overloading is a feature in java where multiple methods can have same name
but the order,type and number should be different.
Example:
class Calculation
{
    public int  addition(int a,int b,int c)
    {
        return a+b+c;
    }
    public int  addition(int a,int b)
    {
        return a+b;
    }
}
public class MethodOverloadingConcept {
    public static void main(String[] args) {
        Calculation c = new Calculation();
        System.out.println("Sum = "+ c.addition(1,2,3));
        System.out.println("Sum ="+ c.addition(1,2));
    }
}

What is the use of this and super keyword.Explain with example.
this is a keyword in java which is  used to refer to instance variable methods or constructor with in the same class.
And super is also a keyword in java which is used to refer to instance variable, methods or constructor form the parent(super class) class
Example:
class Animal
{
    String name="Animal";
    void display()
    {
        System.out.println("I am a Animal");
    }
}
class Dog extends Animal
{
    String name ="Dog";
    void ShowNames()
    {
        System.out.println("Child class name:"+this.name);
        System.out.println("Parent class name:"+super.name);
    }
    void display()
    {
        super.display();
        System.out.println("I am a dog");
    }
}
public class ThisSuperKeywordExample {
    public static void main(String[] args) {
        Dog d = new Dog();
        d.ShowNames();
        d.display();
    }
}

Define Exceptions.How Exceptions are handeled in java? Explain with a proper example.
An exception in java is an unwanted event or error that occurs during the execution
of the program,which disrupts the normal flow of the program.
Exception are objects which represent runtime errors, such as dividing by zero,
accessing an invalid array index, or opening a file that doesnot exist.
We can handle exceptions through following keywords:try,catch,throw,throws.

Example:
public class ExceptionDemo
{
public static void main(String[] args)
{
try{
int i=0,num=2;
int div = num/i;
System.out.println("THis line will not execute");
}
catch(Exception e)
{
System.out.println("Exception caught!");
e.printStackTrace();
}
}
}

Write short note on:
An interface in java is a reference type,similar to class, that can contain only abstract methods(by default)
and constants(public,static, and final).It is used to achieve multiple inheritence in java, which is not possible
with classes alone.A class can implement multiple interface,allowing it to inherit behaviour from more than one source.
Interface define what a class must do,but not how it does it.
Example:
interface Printable{
void print();
}
interface Showable
{
void show();
}
class Demo implements Printable,Showable{
public void print()
{
System.out.println("Printing");
}
public void show()
{
System.out.println("Showing");
}
}

Access Modifiers:Access modifiers in java are used to set the visibility and accessibility of classed methods, and
variables.They help in encapsulation and security if code by restricting access.
Tupes of Access Modifiers: public,private,protected etc.
Example:
public class Example
{
private int a = 10;
protected int b = 20;
public int c = 30;
}

Define Inheritence.Explain the use of extends keyword in java.
Inheritence is the oops concept which helps to inherit the property of the parent class(Super class)
to child class.It helps in code reusability and makes the program more organized and modular.
The extends keyword is used in java to establish an inheritence relationship between a child class
and a parent class.
Example:
Class Animal
{
int legs;
int eyes;
int ears;
public Animal(int legs,int eyes,int ears)
{
this.legs = legs;
this.eyes=eyes;
this.ears=ears;
}
public void display()
{
sout(legs,eyes,ears);
}
}
class InheritenceDemo extends Animal
{
public InheritenceDemo()
{
super(4,2,2);
}
public void show()
{
display();
}
public static void main(String[] args)
{
Dog d = new Dog();
d.show();
}
}

What is abstract class?Expalin its use with example.
An abstract class is a class that cannot be instantiated and may contain abstract methods
(without body) as well as concrete methods(with body).It's used to provide a common base for subclasses
and to enforce certain methods to implemented in child methods.
Example:
package OOPsConcept;
abstract class Teacher
{
    public void display()
    {
        System.out.println("Teacher can teach");
    }
    abstract void role();
}
class Student extends Teacher{
    void role()
    {
        System.out.println("Student can study");
    }
}
public class AbstractClassDemo {
    public static void main(String[] args) {
        Teacher t = new Student();
        t.display();// calls concrete method from Teacher
        t.role();//calls implemented abstract method in Stuudent
    }
}

Differentiate between bytestream and character stream. Wap to copy the content of a file to another file using streams.
Bytestream is a concept of file handeling which handeles binary data(image,audio etc). which has base classes
FileInputStream and FileOutputStream, and read/writes 1 byte at a time.
while Character stream is a concept of file handeling which handles character(text data).
It has base class FileReader and FileWriter which reads/writes 1 character at a time.
Example:
package FileHandeling;
import java.io.*;
public class FileReadWriteDemo {
    public static void main(String[] args) {
        try
        {
            FileReader fr = new FileReader("vowel.txt");
            FileWriter fw = new FileWriter("hello.txt");
            int c;
            while((c=fr.read())!=-1)
            {
                fw.write(c);
            }
            fr.close();
            fw.close();
            System.out.println("Succesfully copied the content");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}

Differentiate between abstract class and interface,with suitable example.
Abstract class are the class which contain abstract method and concrete methods which supports single inheritence.
And Interface contains only abstract methods and access modifier public and used to support multiple Inheritence.
Example of Abstract class:
abstract class Name
{
public void display()
{
sout("This is name");
}
abstract void show();
}
class Surname extends Name
{
 void show()
{
sout("This is surname");
}
psvm
{
Surname s = new Surname();
s.display();
s.show();
}
}

Example of Interface:
package OOPsConcept;
interface Hi
{
    abstract void display();
}
interface Hello
{
    abstract void show();
}
public class InterfaceDemo implements Hi,Hello{
    public void display()
    {
        System.out.println("Hi World");
    }
   public void show()
    {
        System.out.println("Hello Wolrd");
    }

    public static void main(String[] args) {
        InterfaceDemo i = new InterfaceDemo();
        i.display();
        i.show();
    }
}

Define Access Modifier. Explain access modifiers in java with example.
Access Modifiers are the keywords which are used to define the accessiability and the visibility of variable, method and classes to others which makes
our code more secure and protected.They help enforce encapsulation,increase security and control who can access.
The types of access modifiers in java are:
public:Accessible from anywhere.
private:Accessible only within the class.
Protected:Accessible in same package+subclasses.
Default:Accessible with in the same package.

Example:
